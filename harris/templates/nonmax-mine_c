
	// step 4: do non-maximum suppression
	float *diffX = new float[width_ * height_];
	float *diffY = new float[width_ * height_];
	float *magnitude = new float[width_ * height_];

	float *extHcr = extendImage(hcrIntern, offset);

	// again, convolve HCR with derived Gaussian to get edges
	for(imgrow = offset; imgrow < extHeight - offset; imgrow++)
	{
		for(imgcol = offset; imgcol < extWidth - offset; imgcol++)
		{
			sumX = 0;
			sumY = 0;

			// calculate weighted sum over kernel (convolution)
			for(krow = 0; krow < kernelSize_; krow++)
			{
				for(kcol = 0; kcol < kernelSize_; kcol++)
				{
					row = imgrow + krow - offset;
					col = imgcol + kcol - offset;

					sumX += extHcr[row * extWidth + col] * gaussKernel_[krow * kernelSize_ + kcol];
					sumY += extHcr[row * extWidth + col] * gaussKernel_[krow * kernelSize_ + kcol];
				}
			}

			diffX[(imgrow - offset) * width_ + (imgcol - offset)] = sumX;
			diffY[(imgrow - offset) * width_ + (imgcol - offset)] = sumY;
			magnitude[(imgrow - offset) * width_ + (imgcol - offset)] = sqrt(sumX * sumX + sumY * sumY);
		}
	}

	delete[] extHcr;


	// now find maxima
	bool sameSign;  // dX and dY have same sign
	int delta;
	float dX, dY, a1, a2, A, b1, b2, B, P;

	for(row = 1; row < height_ - 1; row++)
	{
		for(col = 1; col < width_ - 1; col++)
		{
			dX = diffX[row * width_ + col];
			dY = diffY[row * width_ + col];

			sameSign = ((dX > 0) && (dY > 0)) || ((dX < 0) && (dY<0));

			// set increments for different quadrants
			if(sameSign || dY == 0) delta = 1;
			else delta = -1;  // !sameSign || dX == 0

			if((abs(dX) > abs(dY)) || ((abs(dX) == abs(dY) && (!sameSign || dX == 0))))
			{
				a1 = magnitude[(row - 1) * width_ + (col)];
				a2 = magnitude[(row - 1) * width_ + (col + delta)];
				b1 = magnitude[(row + 1) * width_ + (col)];
				b2 = magnitude[(row + 1) * width_ + (col - delta)];

				A = (abs(dX) - abs(dY)) * a1 + abs(dY) * a2;
				B = (abs(dX) - abs(dY)) * b1 + abs(dY) * b2;

				P = magnitude[row * width_ + col] * abs(dX);
			}
			else  // abs(dX) < abs(dY) || (abs(dX) == abs(dY) && (sameSign || dY == 0))
			{
				a1 = magnitude[(row) * width_ + (col - 1)];
				a2 = magnitude[(row + delta) * width_ + (col - 1)];
				b1 = magnitude[(row) * width_ + (col + 1)];
				b2 = magnitude[(row - delta) * width_ + (col + 1)];

				A = (abs(dY) - abs(dX)) * a1 + abs(dX) * a2;
				B = (abs(dY) - abs(dX)) * b1 + abs(dX) * b2;

				P = magnitude[row * width_ + col] * abs(dY);
			}

			if(!(P > A && P > B))
			{
				hcrIntern[row * width_ + col] = 0;
			}
		}
	}

